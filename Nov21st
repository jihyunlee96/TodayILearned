// Baekjoon #1992
// https://www.acmicpc.net/status?user_id=jihyunlee&problem_id=1992&from_mine=1

#include <iostream>

using namespace std;

void quad_tree(char **arr, int start_x, int start_y, int n) {
	int zero_count = 0, one_count = 0;

	// check if data in given array is all 0 or 1
	for (int i = start_y; i < start_y + n; i ++) {
		for (int j = start_x; j < start_x + n; j ++) {
			if (arr[i][j] == '0')
				zero_count ++;
			else
				one_count ++;
		}
	}
	if (zero_count == n * n) {
		cout << '0';
		return;
	}
	else if (one_count == n * n) {
		cout << '1';
		return;
	}

	// if data in given array is not all 0 or 1, call by recursion
	cout << '(';

	// for left-up
	quad_tree(arr, start_x, start_y, n/2);
	// for right-up
	quad_tree(arr, start_x + n/2, start_y, n/2);
	// for left-down
	quad_tree(arr, start_x, start_y + n/2, n/2);
	// for right-down
	quad_tree(arr, start_x + n/2, start_y + n/2, n/2);

	cout << ')';
}

int main() {
	char **arr;
	int n;
	
	// receive n from user input
	cin >> n;

	// allocate 2d array (n x n)
	arr = new char*[n];
	for (int i = 0; i < n; i ++)
		arr[i] = new char[n];

	// fill out the data in 2d array
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < n; j ++)
			cin >> arr[i][j]; 

	// call quad_tree function
	quad_tree(arr, 0, 0, n);

	return 0;
}
